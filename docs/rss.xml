<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Portfolio</title><description>A portfolio template for Astro</description><link>https://astro-portfolio-template.pages.dev/</link><item><title>Buffer Overflow</title><link>https://astro-portfolio-template.pages.dev/posts/buffer_overflow/</link><guid isPermaLink="true">https://astro-portfolio-template.pages.dev/posts/buffer_overflow/</guid><description>Learn how to exploit buffer overflows in this post!</description><pubDate>Mon, 15 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Fancy way to exploit the buffer&lt;/h2&gt;
&lt;p&gt;Have you ever heard of buffer overflows?&lt;sup&gt;&lt;a href=&quot;#user-content-fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; They are a common vulnerability in software that can be exploited to gain unauthorized access to a system. In this post, we will explore how &lt;code&gt;buffer overflows&lt;/code&gt; work and how they can be exploited.&lt;/p&gt;
&lt;h3&gt;What is a buffer overflow?&lt;/h3&gt;
&lt;p&gt;That is so important! &lt;span&gt;üÜò&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; vuln&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; *&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    char&lt;/span&gt;&lt;span&gt; buffer&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    strcpy&lt;/span&gt;&lt;span&gt;(buffer, input);&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    char&lt;/span&gt;&lt;span&gt; input&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    scanf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, input);&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    vuln&lt;/span&gt;&lt;span&gt;(input);&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    return&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the code above, we have a vulnerable function &lt;code&gt;vuln&lt;/code&gt; that copies the input string into a buffer of size 10. If the input string is longer than 10 characters, it will overflow the buffer and overwrite the return address of the function. This can be exploited to execute arbitrary code or gain control of the program.&lt;/p&gt;
&lt;p&gt;To exploit this vulnerability, we can craft an input string that contains shellcode or a payload that will be executed when the buffer overflows. This is a simplified example, but buffer overflows are a serious security issue that can have severe consequences if not properly mitigated.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A man once said, ‚ÄúWith great power comes great responsibility.‚Äù - Uncle Ben&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand how buffer overflows work&lt;/li&gt;
&lt;li&gt;Follow secure coding practices&lt;/li&gt;
&lt;li&gt;Use tools like static analysis and fuzz testing to identify and fix buffer overflow vulnerabilities in software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand more about buffer overflows, you can check out the following resources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Buffer_overflow&quot;&gt;Buffer Overflow Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://owasp.org/www-community/attacks/Buffer_Overflow&quot;&gt;Buffer Overflow Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Buffer_Overflow&quot;&gt;Buffer Overflow Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section&gt;&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Probably yes, if you are reading this post. &lt;a href=&quot;#user-content-fnref-1&quot;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content:encoded></item><item><title>Heap Exploitation</title><link>https://astro-portfolio-template.pages.dev/posts/heap_exploitation/</link><guid isPermaLink="true">https://astro-portfolio-template.pages.dev/posts/heap_exploitation/</guid><description>Find out how to exploit heap vulnerabilities in this post!</description><pubDate>Mon, 01 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Fancy way to exploit the heap&lt;/h2&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The heap is a memory region used for dynamic memory allocation in programs. It is a common target for attackers looking to exploit memory corruption vulnerabilities. In this post, we will explore how heap exploitation works and how attackers can leverage heap vulnerabilities to gain unauthorized access to a system.&lt;/p&gt;
&lt;p&gt;In this post, we will focus on &lt;code&gt;glibc&lt;/code&gt; heap exploitation, which is a common target for attackers due to its widespread use in Linux systems. We will cover the basics of heap memory management, common heap exploitation techniques, and how to protect against heap vulnerabilities.&lt;/p&gt;
&lt;h3&gt;Heap Memory Management&lt;/h3&gt;
&lt;p&gt;The heap is a memory region used for dynamic memory allocation in programs. When a program requests memory from the heap using functions like &lt;code&gt;malloc&lt;/code&gt; or &lt;code&gt;free&lt;/code&gt;, the memory manager allocates or deallocates memory blocks from the heap. The memory manager keeps track of the allocated and free memory blocks using data structures like bins, chunks, and arenas.&lt;/p&gt;
&lt;h3&gt;Basic Vulnerabilities&lt;/h3&gt;
&lt;p&gt;Heap vulnerabilities can arise from memory corruption bugs like buffer overflows, use-after-free, double-free, and other memory safety issues. These vulnerabilities can be exploited to overwrite data structures in the heap, control the program‚Äôs execution flow, or leak sensitive information from memory.&lt;/p&gt;
&lt;h4&gt;Example: double-free vulnerability&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    int&lt;/span&gt;&lt;span&gt; *&lt;/span&gt;&lt;span&gt;ptr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; *&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    free&lt;/span&gt;&lt;span&gt;(ptr);&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    some_function_by_which_the_user_can_allocate_stuff&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    free&lt;/span&gt;&lt;span&gt;(ptr);&lt;/span&gt;&lt;span&gt; // Double-free vulnerability&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    return&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the code above, we have a double-free vulnerability where the same memory block is freed twice. This can corrupt the heap‚Äôs data structures and lead to undefined behavior. Attackers can exploit this vulnerability to manipulate the heap‚Äôs metadata and gain control of the program. In fact, after the first free, the chunk goes into the fastbin list. If we allocate a chunk of the same size, we can get the same chunk back, modify it to point to a fake chunk (which we want to control), and then free it again. This is a common technique used in heap exploitation called fastbin attack.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Heap exploitation is a complex topic that requires a deep understanding of memory management and memory corruption vulnerabilities. By understanding how heap memory management works and common heap exploitation techniques, developers can better protect their software from heap vulnerabilities. It is important to follow secure coding practices, use memory-safe languages, and perform security testing to identify and fix heap vulnerabilities in software.&lt;/p&gt;</content:encoded></item><item><title>My First Astro Post</title><link>https://astro-portfolio-template.pages.dev/posts/post1/</link><guid isPermaLink="true">https://astro-portfolio-template.pages.dev/posts/post1/</guid><description>This is my first Astro post. Stay tuned for more exciting content coming soon!</description><pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my first Astro post. Stay tuned for more exciting content coming soon!
Voluptate dolor aliquip ipsum aliquip velit cillum mollit aliqua veniam cillum sint enim ad amet. Lorem cillum consectetur esse sint. Cillum excepteur do enim nulla qui esse sint ipsum amet adipisicing do.&lt;/p&gt;
&lt;h2&gt;Section 1&lt;/h2&gt;
&lt;p&gt;Commodo adipisicing et tempor laboris commodo enim consequat. Exercitation velit nulla excepteur eu qui minim in. Laborum occaecat occaecat irure occaecat labore et deserunt adipisicing exercitation.&lt;/p&gt;
&lt;p&gt;Duis est sint Lorem anim. Excepteur sunt magna sint exercitation aliqua adipisicing dolor dolore anim tempor Lorem enim dolore. Aliqua aliqua occaecat laborum culpa enim. Aliqua et ad consequat elit officia Lorem sunt voluptate adipisicing laborum velit adipisicing sunt. Sit cupidatat consequat velit eiusmod ut excepteur elit cillum irure pariatur sunt eu sunt dolor. Nisi eu est reprehenderit cillum magna eiusmod elit aliqua amet reprehenderit irure.&lt;/p&gt;
&lt;h2&gt;Section 2&lt;/h2&gt;
&lt;p&gt;Reprehenderit tempor laborum enim adipisicing amet tempor et. Consectetur reprehenderit sit quis ea ad occaecat aliquip ipsum aliqua aliquip proident ullamco culpa. Eu eu enim proident deserunt irure do in commodo nostrud elit quis quis occaecat sit. Occaecat cupidatat cillum ex in nisi laborum ullamco cillum officia amet et. Aliquip enim exercitation sint ut in deserunt ut et laborum ex reprehenderit cillum do. Veniam veniam amet aute incididunt mollit ex cupidatat nulla.&lt;/p&gt;
&lt;p&gt;Esse esse Lorem culpa minim consectetur dolor exercitation sunt in. Cillum proident labore irure dolor dolore. Mollit cillum esse quis labore aliqua reprehenderit anim ad sint ullamco tempor. Commodo veniam est mollit excepteur anim pariatur elit ullamco aliquip ut enim id magna. Lorem cillum ad Lorem ea.&lt;/p&gt;
&lt;p&gt;Aute ullamco aute ea cillum nisi duis laborum consequat nisi deserunt dolore ex officia. Nulla deserunt laboris laborum cillum occaecat occaecat ut incididunt ex laboris consequat eu. Exercitation consequat ullamco excepteur excepteur in pariatur cupidatat pariatur aute aute tempor aliquip.&lt;/p&gt;
&lt;p&gt;Eiusmod consequat occaecat aute sint velit veniam Lorem officia consequat proident est consectetur aliqua. Tempor pariatur ipsum voluptate ex incididunt ea ad minim quis id sit Lorem culpa adipisicing. Commodo nisi non sunt ipsum eiusmod voluptate est aliquip in deserunt.&lt;/p&gt;
&lt;p&gt;Nisi cupidatat exercitation irure nulla irure ut Lorem irure Lorem. Ex et sunt esse sint. Magna elit Lorem consequat sint occaecat ad do tempor. Nostrud velit exercitation mollit ut aute labore pariatur ipsum. Nostrud ad adipisicing velit elit aute enim adipisicing consequat dolore voluptate nostrud. Tempor nulla Lorem eu aliquip. Dolor labore est fugiat aute sint sint incididunt sunt non adipisicing tempor.&lt;/p&gt;
&lt;p&gt;Elit incididunt anim non magna pariatur dolor id officia irure nostrud aute reprehenderit veniam. Incididunt fugiat sit laboris deserunt et ea id cupidatat ex irure deserunt magna exercitation labore. Enim ad quis consequat ullamco velit dolore dolor labore elit amet sint minim nostrud. Occaecat Lorem sunt reprehenderit cillum. Et Lorem non excepteur tempor laborum laborum. Qui cupidatat adipisicing magna ullamco sit minim fugiat aliqua consectetur fugiat eiusmod.&lt;/p&gt;
&lt;p&gt;Cillum enim amet amet dolor sint minim eiusmod consectetur amet labore ut. Velit aliqua minim aute incididunt do. Laboris veniam adipisicing adipisicing ut aliqua do. Qui laborum quis cillum est tempor mollit elit reprehenderit.&lt;/p&gt;</content:encoded></item></channel></rss>